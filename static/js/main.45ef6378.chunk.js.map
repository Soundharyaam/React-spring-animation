{"version":3,"sources":["components/Component1.js","components/Component2.js","components/Component3.js","App.js","serviceWorker.js","index.js"],"names":["Component1","react_default","a","createElement","web","from","opacity","marginTop","to","props","style","c1Style","textAlign","number","config","duration","counter","toFixed","background","color","padding","width","borderRadius","margin","Component2","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","delay","c2Style","sty","btn","onClick","toggle","Component","border","textTransform","Component3","c3Style","App","state","showComponent3","e","setState","className","components_Component2","native","items","enter","leave","show","div","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45ef6378.chunk.js","sourcesContent":["import React from 'react';\nimport {Spring} from 'react-spring'; \n\nexport default function Component1() {\n  return (\n    <Spring \n    from ={{opacity:0, marginTop:-500}} to={{opacity:1, marginTop:0}}>\n       { props=> (\n           <div style={props}>\n                <div style={c1Style}>\n                    <h1 style={textAlign}>Soundharya</h1>\n                    <p style={textAlign}>Front-end developer</p>\n                    <br/>\n                    <h5 style={textAlign}>Count down animation</h5>\n                    <Spring from={{number:0}} to={{number:10}} config={{duration:10000}}>\n                    {props=>(\n                        <div style={props}>\n                        <h1 style={counter}>\n                            {props.number.toFixed()}\n                        </h1>\n                        </div>\n                    )}\n                    </Spring>\n                </div>\n           </div>\n       ) } \n    </Spring>\n  )\n}\n\nconst c1Style={\n    background: '#C71585',\n    color:'white',\n    padding:'1.5rem'\n}\n\nconst textAlign={\n   textAlign:'center'\n}\n\nconst counter={\n\n    background:'#333',\n    textAlign:'center',\n    width:'100px',\n    borderRadius:'50%',\n    margin:'1rem auto'\n};\n","import React, { Component } from 'react';\nimport { Spring } from 'react-spring';\n\nexport class Component2 extends Component {\n\n  render() {\n    return (\n        <Spring \n        from ={{opacity:0, marginTop:-500}} to={{opacity:1, marginTop:0}}\n            config={{delay:1000, duration:1000}}>\n           { props=> (\n               <div style={props}>\n                    <div style={c2Style}>\n                        <h1 sty>About</h1>\n                        <p>I love travel photography and writing the non-fiction, fiction, self-help articles. </p>\n                        <button style={btn} onClick={this.props.toggle}>Know More!</button>\n                    </div>\n               </div>\n           ) } \n        </Spring>\n    )\n  }\n}\n\nconst c2Style={\n    background: 'white',\n    color:'black',\n    padding:'1.5rem'\n}\n\nconst btn={\n    background:'#333',\n    color:'#fff',\n    padding:'1rem 2rem',\n    border:'none',\n    textTransform:'uppercase',\n    margin:'15px 0'\n   \n};\n\nexport default Component2;\n","import React from 'react';\n\nexport default function Component3() {\n  return (\n    <div style={c3Style}>\n        <h1 style={textAlign}>Other Interests</h1>\n        <p style={textAlign}>I like riding a bicycle. It just propels me every time and provides me the positive energy when it's fine needed.\n              </p>\n    </div>\n  )\n}\n\nconst c3Style={\n    background: 'slateblue',\n    color:'white',\n    padding:'1.5rem 1.5rem 5rem 1.5rem'\n}\n\nconst textAlign={\n    textAlign:'center',\n}","import React, { Component } from 'react';\nimport { Transition, animated } from 'react-spring';\nimport Component1 from './components/Component1';\nimport Component2 from './components/Component2';\nimport Component3 from './components/Component3';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    showComponent3:false  \n  }\n\n  toggle = e =>{\n    this.setState({\n      showComponent3:!this.state.showComponent3\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Component1/>\n        <Component2 toggle={this.toggle}/>\n        <Transition native items={this.state.showComponent3}\n        from={{opacity:0}} enter={{opacity:1}} leave={{opacity:0}}\n        >\n        {show => show && (props =>(\n          <animated.div style={props}>\n            <Component3/>\n          </animated.div> \n        ))}\n        </Transition>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}